<h1>Lista de Productos</h1>
{{#if userData }}
<p>Bienvenido, {{userData.email}} (Rol: {{userData.role}})</p>
<button onclick="logout()">Cerrar Sesión</button>
{{#each products}}
<div>
  <h2>{{title}}</h2>
  <p>{{description}}</p>
  <p>Precio: ${{price}}</p>
  <button onclick="addToCart('{{_id}}', '{{../userData.cartId}}')">Agregar al carrito</button>
</div>
{{/each}}


<h2>Carrito de Compras</h2>
<p id="emptyCart">El carrito está vacío.</p>
<ul id="cartList">
  {{#each cart.products}}
  <li id="cartItem">{{this.title}} - Precio: ${{this.price}}</li>
  {{/each}}
</ul>
<button onclick="purchaseCart('{{userData.cartId}}')">Comprar</button>

<script>
  function logout() {
    fetch('/logout', {
      method: 'GET',
    })
      .then(response => response.json())
      .then(data => {
        console.log(data)
        if (data.success) {
          window.location.href = '/login';
        } else {
          console.error('Error al cerrar sesión:', data.error);
        }
      })
      .catch(error => {
        console.log(error)
        console.error('Error al cerrar sesión:', error);
      });
  }

  document.addEventListener('DOMContentLoaded', function () {
    const cartId = '{{userData.cartId}}';
    updateCartView(cartId);
  });

  function addToCart(productId, cartId) {
    console.log(cartId)

    if (!cartId) {
      console.error('Error: El ID del carrito es nulo o no está definido.');
      return;
    }

    fetch(`/api/carts/${cartId}/product/${productId}`, {
      method: 'POST',
    })
      .then(response => response.json())
      .then(data => {
        console.log(data);
        updateCartView(cartId);
        // Actualizar la vista del carrito si es necesario
      })
      .catch(error => {
        console.log(error)
        console.error('Error al agregar producto al carrito:', error);
      });

  }

  function updateCartView(cartId) {
    fetch(`/api/carts/${cartId}`, {
      method: 'GET',
    })
      .then(response => response.json())
      .then(data => {
        console.log(data, "hbs products");
        const cartList = document.getElementById('cartList');
        const emptyCartMessage = document.getElementById('emptyCart');

        if (cartList && emptyCartMessage) {
          // Limpiar la lista actual
          cartList.innerHTML = '';

          if (data.products.length > 0) {
            // Volver a construir la lista con los productos actualizados
            data.products.forEach(product => {
              const listItem = document.createElement('li');
              const totalPrice = product.quantity * product.price;
              listItem.textContent = `${product.title} - Cantidad: ${product.quantity} - Precio Total: $${totalPrice} `;
              cartList.appendChild(listItem);
            });

            // Ocultar el mensaje de carrito vacío
            emptyCartMessage.style.display = 'none';
          } else {
          // Mostrar el mensaje de carrito vacío
          emptyCartMessage.textContent = 'El carrito está vacío.';
          emptyCartMessage.style.display = 'block';
        }
        }
      })
      .catch(error => {
        console.error('Error al actualizar la vista del carrito:', error);
      });
  }


  function purchaseCart(cartId) {
    const ticketCode = generateTicketCode();

    fetch(`/api/carts/${cartId}/purchase?ticketCode=${ticketCode}`, {
      method: 'POST',
    })
      .then(response => response.json())
      .then(data => {
        console.log("Ticket de compra generado: ", ticketCode)
      })
      .catch(error => {
        console.error('Error al realizar la compra:', error);
      });

    fetch(`/api/carts/${cartId}/purchase`, {
      method: 'POST',
    })
      .then(response => response.json())
      .then(data => {
        console.log(data);

        if (data.emailSent) {
          alert(`¡Compra exitosa! Se ha enviado un correo electrónico de confirmación. Ticket: ${ticketCode}`);
          emptyCart(cartId);
        }
      })
      .catch(error => {
        console.error('Error al realizar la compra:', error);
      });
  }

  function emptyCart(cartId) {
    fetch(`/api/carts/${cartId}`, {
      method: 'DELETE',
    })
      .then(response => response.json())
      .then(data => {
        updateCartView(cartId);
      })
      .catch(error => {
        console.error('Error al vaciar el carrito:', error);
      });
  }

    function generateTicketCode() {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const codeLength = 8;
    let code = '';

    for (let i = 0; i < codeLength; i++) {
      const randomIndex = Math.floor(Math.random() * characters.length);
      code += characters.charAt(randomIndex);
    }

    return code;
  }

</script>
{{/if}}